#!/bin/bash -x
# This script is released under the GNU General Public License 3.0
# Check the COPYING file included with this distribution

# pentoo-installer
# main menu for the installation
# sub scripts should write only results to STDOUT
# menus and noise go to STDERR
# params: none
#
# returns 0 on success
# returns $ERROR_CANCEL=64 on user cancel
# anything else is a real error
# reason: show_dialog() needs a way to exit "Cancel"
#

#this really shouldn't fail, but somehow it did
#readonly SHAREDIR="$(dirname ${0})/../share/pentoo-installer"
readonly SHAREDIR="/usr/share/pentoo-installer"

# source common variables, functions and error handling
# also get functions to save settings
source "${SHAREDIR}"/save_settings.sh || exit $?

#####################
## begin execution ##

# check if this boot was verified and warn the user to verify the checksums if not
if ! grep -q verify /proc/cmdline; then
	VERIFY="$(show_dialog \
		--menu "This boot was not verified, it is HIGHLY suggested that you abort and boot with the verify option to ensure integrity. Abort?" \
		0 0 0 \
		'Yes' 'I will reboot and select verify from the boot menu' \
		'No' 'I will continue and do not care about the risks')"
	if [ "${VERIFY}" = "Yes" ]; then
		printf "Installation aborted, please reboot and choose \"verify\" from the boot menu\n"
		exit 1
        fi
fi

## start by exiting if the user doesn't have enough RAM for the install to work
RAMSIZE=$(awk '/MemTotal/ {printf( "%.0f\n", int ( $2 / 1024 ) + 1)}' /proc/meminfo)
if [ "${RAMSIZE}" -le "1500" ]; then
	show_dialog --msgbox "The Pentoo Installer requires a minimum of 1.5GB of RAM to run. Failing safe." 0 0
	exit 1
fi

# check if the installer has been updated and warn the user they may wish to do so
if ! grep -q "completed emerge (.*) pentoo/pentoo-installer-99999999" /var/log/emerge.log; then
	UPDATE_WARNING="true"
else
	updated_at=$(grep "completed emerge (.*) pentoo/pentoo-installer-99999999" /var/log/emerge.log | tail -n1 | awk -F: '{print $1}')
	current=$(date +%s)
	delta=$((${current} - ${updated_at}))
	if [ ${delta} -ge 86400 ]; then
		UPDATE_WARNING="true"
	else
		UPDATE_WARNING="false"
	fi
fi

if [ "${UPDATE_WARNING}" = "true" ]; then
	UPDATE_NOW="$(show_dialog \
		--menu "pentoo-installer gets constant updates to improve experience and fix bugs, would you like to update now?" \
		0 0 0 \
		'Yes' 'I would like to exit and update pentoo-installer to get the latest fixes' \
		'No' 'Why bother to get the latest fixes? I am elite enough to fix it.')"
	if [ "${UPDATE_NOW}" = "Yes" ]; then
		printf "Installation aborted. Please ensure you are connected to the internet (see motd)\n"
		printf "then run 'emerge -1 pentoo-installer' and re-run pentoo-installer after it is up to date.\n"
		exit 1
	fi
fi

# display welcome txt depending on used dialog
WHICHDIALOG="$(get_dialog)"
show_dialog --textbox "${SHAREDIR}/welcome.${WHICHDIALOG}.txt" 0 0 || exit $?

# 'controller' vars
# CONFIG_LIST: One string with 0 or more items of defined FSspec:
CONFIG_LIST=
MAXSELECTION=0
SELECTION=0

# other vars
NEWSELECTION=
RETSUB=
MENU_ITEMS=

# check for settings from previous installation attempt
if settings_check; then
	# ask if old settings should be loaded
	NEWSELECTION="$(show_dialog \
		--menu "Settings from previously aborted installation detected.\nDo you want to load them?" \
		0 0 0 \
		'No' 'Start from scratch' \
		'Yes' 'Load settings (you might have to enter passwords)')"
	RETSUB=$?
	if [ "${RETSUB}" -eq 0 ] && [ "${NEWSELECTION}" = 'Yes' ]; then
		# extra check, pass menu-index of 'Prepare hard drive'
		if ! settings_checkmount 1; then
			show_dialog --msgbox "ERROR: Unable to load old settings." 0 0
			# settings_shred || exit $?
		# load 'controller' vars'
		else
			SELECTION="$(settings_read 1)" || exit $?
			MAXSELECTION="$(settings_read 2)" || exit $?
			CONFIG_LIST="$(settings_read 3)" || exit $?
		fi
	# else
		# remove old files
		# settings_shred || exit $?
	fi
fi

while [ true ]; do
	# define menu items
	MENU_ITEMS=()
	# enable only valid menu items
	# 0 - Set Clock
	[ "${MAXSELECTION}" -le 1 ] && MENU_ITEMS+=('0') || MENU_ITEMS+=('')
	MENU_ITEMS+=("Set Clock")
	# 1 - Prepare Hard Drive
	[ "${MAXSELECTION}" -eq 1 ] && MENU_ITEMS+=('1') || MENU_ITEMS+=('')
	MENU_ITEMS+=("Prepare Hard Drive")
	# 2 - Copy the Distribution
	[ "${MAXSELECTION}" -eq 2 ] && MENU_ITEMS+=('2') || MENU_ITEMS+=('')
	MENU_ITEMS+=("Copy the Distribution")
	# 3 - Select Profile
	[ "${MAXSELECTION}" -ge 3 -a "${MAXSELECTION}" -le 5 ] && MENU_ITEMS+=('3') || MENU_ITEMS+=('')
	MENU_ITEMS+=("Select Profile")
	# 4 - Configure System
	[ "${MAXSELECTION}" -ge 4 -a "${MAXSELECTION}" -le 5 ] && MENU_ITEMS+=('4') || MENU_ITEMS+=('')
	MENU_ITEMS+=("Configure System")
	# 5 - Install Bootloader
	[ "${MAXSELECTION}" -eq 5 ] && MENU_ITEMS+=('5') || MENU_ITEMS+=('')
	MENU_ITEMS+=("Install Bootloader")
	# 6 - Exit Install
	[ "${MAXSELECTION}" -eq 6 ] && MENU_ITEMS+=('6') || MENU_ITEMS+=('')
	MENU_ITEMS+=("Exit Install")
	# expand menu items array below
	NEWSELECTION="$(show_dialog --default-item "${SELECTION}" \
		--menu "Use the UP and DOWN arrows to navigate menus. Use TAB to switch between buttons and ENTER to select." \
		0 0 0 "${MENU_ITEMS[@]}")"
	RETSUB=$?
	if [ "${RETSUB}" -ne "0" ]; then
		show_dialog --yesno "Abort installation?" 0 0 && exit "${RETSUB}"
	fi
	# call subscript by selected item
	case "${NEWSELECTION}" in
		"0")
			"${SHAREDIR}"/settzclock
			RETSUB=$?
			;;
		"1")
			# prepares (encrypted) partitions and returns a list of partition configs
			CONFIG_LIST="$("${SHAREDIR}"/partition_mainmenu)"
			RETSUB=$?
			;;
		"2")
			"${SHAREDIR}"/copy_distro "${CONFIG_LIST}"
			RETSUB=$?
			;;
		"3")
			"${SHAREDIR}"/setprofile "${CONFIG_LIST}"
			RETSUB=$?
			;;
		"4")
			"${SHAREDIR}"/configure_system "${CONFIG_LIST}"
			RETSUB=$?
			;;
		"5")
			"${SHAREDIR}"/bootloader_mainmenu "${CONFIG_LIST}"
			RETSUB=$?
			;;
		"6")
			# umount all again and close cryptsetup
			"${SHAREDIR}"/FSspec umountall "${CONFIG_LIST}"
			RETSUB=$?
			# shred temp config file, it might contain encryption keys
			settings_shred
			if [ "${RETSUB}" -eq 0 ]; then
				echo ""
				echo "If the install finished successfully, you can now type 'reboot'"
				echo "to restart the system."
				echo ""
				exit 0
			fi
			;;
		# disabled but displayed options
		'')
			continue
			;;
		*)
			echo "ERROR: Unexpected response '${NEWSELECTION}' in $(basename $0)" 1>&2
			exit 1
			;;
	esac
	# handle errors from sub-script/functions using a common utility function
	if ! catch_menuerror "$(basename $0)" "${NEWSELECTION}" "${RETSUB}"; then
		# everything ok, increase selection for next menu item
		SELECTION="$((NEWSELECTION+1))" || exit $?
		if [ "${MAXSELECTION}" -lt "${SELECTION}" ]; then
			MAXSELECTION="${SELECTION}"
		fi
		# write settings to temp file
		settings_write "${SELECTION}" "${MAXSELECTION}" "${CONFIG_LIST}" || exit $?
	fi
done
