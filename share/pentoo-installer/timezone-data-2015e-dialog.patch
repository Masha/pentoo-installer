based on original work by wuodan here:
https://github.com/Wuodan/tz/commit/5297b9ca06f79c334b9492713ce388b590e436e3

--- tzselect.patched	2015-09-19 23:23:37.357786123 -0400
+++ tzselect.patched2	2015-09-19 23:49:50.395684504 -0400
@@ -36,6 +36,7 @@
 # Specify default values for environment variables if they are unset.
 : ${AWK=awk}
 : ${TZDIR=/usr/share/zoneinfo}
+: ${SHOWDIALOG=showdialog}
 
 # Output one argument as-is to standard output.
 # Safer than 'echo', which can mishandle '\' or leading '-'.
@@ -79,9 +80,10 @@
 Report bugs to $REPORT_BUGS_TO."
 
 # Ask the user to select from the function's arguments,
-# and assign the selected argument to the variable 'select_result'.
+# and print selected argument
 # Exit on EOF or I/O error.  Use the shell's 'select' builtin if available,
 # falling back on a less-nice but portable substitute otherwise.
+# First argument is the message preceeding the selection
 if
   case $BASH_VERSION in
   ?*) : ;;
@@ -94,11 +96,15 @@
   # even though it is never executed.
   eval '
     doselect() {
+      # print message first
+      echo >&2 "${1}"
+      shift
       select select_result
       do
 	case $select_result in
 	"") echo >&2 "Please enter a number in range." ;;
-	?*) break
+	# print result
+	?*) echo -n "${select_result}"; break
 	esac
       done || exit
     }
@@ -113,6 +119,9 @@
   '
 else
   doselect() {
+    # print message first
+    echo >&2 "${1}"
+    shift
     # Field width of the prompt numbers.
     select_width=`expr $# : '.*'`
 
@@ -134,6 +143,8 @@
 	if test 1 -le $select_i && test $select_i -le $#; then
 	  shift `expr $select_i - 1`
 	  select_result=$1
+	  # print result
+	  echo -n "${select_result}"
 	  break
 	fi
 	echo >&2 'Please enter a number in range.'
@@ -146,6 +157,38 @@
   }
 fi
 
+# showdialog()
+# All normal user input/output goes through this function
+#
+# The user dialog of this script can be altered by setting
+# the SHOWDIALOG variable as in:
+# SHOWDIALOG=$PWD/tzselect_dialog tzselect
+# where 'tzselect_dialog' imitates this function
+#
+# Arguments:
+#  Type: one of: menu, yesno, msgbox, inputbox
+#  Message: text to display
+#  Options: menu-options, only for types menu and yesno
+#
+showdialog() {
+	# action depends on first argument
+	case "${1}" in
+		menu|yesno)
+			shift
+			doselect "${@}"
+			return $? ;;
+		msgbox)
+			echo >&2 "${2}"
+			return 0 ;;
+		inputbox)
+			echo >&2 "${2}"
+			read INPUTBOX
+			echo -n "${INPUTBOX}"
+			return 0 ;;
+	esac
+	return 1
+}
+
 while getopts c:n:t:-: opt
 do
     case $opt$OPTARG in
@@ -291,8 +334,7 @@
 # Begin the main loop.  We come back here if the user wants to retry.
 while
 
-	echo >&2 'Please identify a location' \
-		'so that time zone rules can be set correctly.'
+	dialogtext='Please identify a location so that time zone rules can be set correctly.'
 
 	continent=
 	country=
@@ -305,7 +347,8 @@
 
 	# Ask the user for continent or ocean.
 
-	echo >&2 'Please select a continent, ocean, "coord", or "TZ".'
+	dialogtext="${dialogtext}
+Please select a continent, ocean, \"coord\", or \"TZ\"."
 
         quoted_continents=`
 	  $AWK '
@@ -325,10 +368,9 @@
 	`
 
 	eval '
-	    doselect '"$quoted_continents"' \
+	    continent=`"${SHOWDIALOG}" menu '\'"${dialogtext}"\'' '"$quoted_continents"' \
 		"coord - I want to use geographical coordinates." \
-		"TZ - I want to specify the time zone using the Posix TZ format."
-	    continent=$select_result
+		"TZ - I want to specify the time zone using the Posix TZ format."` || exit $?
 	    case $continent in
 	    Americas) continent=America;;
 	    *" "*) continent=`expr "$continent" : '\''\([^ ]*\)'\''`
@@ -340,11 +382,9 @@
 	TZ)
 		# Ask the user for a Posix TZ string.  Check that it conforms.
 		while
-			echo >&2 'Please enter the desired value' \
-				'of the TZ environment variable.'
-			echo >&2 'For example, GST-10 is a zone named GST' \
-				'that is 10 hours ahead (east) of UTC.'
-			read TZ
+			TZ=`"${SHOWDIALOG}" inputbox \
+				'Please enter the desired value of the TZ environment variable.
+For example, GST-10 is a zone named GST that is 10 hours ahead (east) of UTC.'` || exit $?
 			$AWK -v TZ="$TZ" 'BEGIN {
 				tzname = "[^-+,0-9][^-+,0-9][^-+,0-9]+"
 				time = "[0-2]?[0-9](:[0-5][0-9](:[0-5][0-9])?)?"
@@ -357,7 +397,7 @@
 				exit 0
 			}'
 		do
-		    say >&2 "'$TZ' is not a conforming Posix time zone string."
+			"${SHOWDIALOG}" msgbox "'$TZ' is not a conforming Posix time zone string."
 		done
 		TZ_for_date=$TZ;;
 	*)
@@ -365,12 +405,10 @@
 		coord)
 		    case $coord in
 		    '')
-			echo >&2 'Please enter coordinates' \
-				'in ISO 6709 notation.'
-			echo >&2 'For example, +4042-07403 stands for'
-			echo >&2 '40 degrees 42 minutes north,' \
-				'74 degrees 3 minutes west.'
-			read coord;;
+			coord=`"${SHOWDIALOG}" inputbox \
+				'Please enter coordinates in ISO 6709 notation.
+For example, +4042-07403 stands for
+40 degrees 42 minutes north, 74 degrees 3 minutes west.'` || exit $?
 		    esac
 		    distance_table=`$AWK \
 			    -v coord="$coord" \
@@ -383,12 +421,10 @@
 		      BEGIN { FS = "\t" }
 		      { print $NF }
 		    '`
-		    echo >&2 'Please select one of the following' \
-			    'time zone regions,'
-		    echo >&2 'listed roughly in increasing order' \
-			    "of distance from $coord".
-		    doselect $regions
-		    region=$select_result
+		    region=`"${SHOWDIALOG}" menu \
+		    "Please select one of the following time zone regions,
+listed roughly in increasing order of distance from $coord." \
+		    $regions` || exit $?
 		    TZ=`say "$distance_table" | $AWK -v region="$region" '
 		      BEGIN { FS="\t" }
 		      $NF == region { print $4 }
@@ -425,10 +461,9 @@
 		# If there's more than one country, ask the user which one.
 		case $countries in
 		*"$newline"*)
-			echo >&2 'Please select a country' \
-				'whose clocks agree with yours.'
-			doselect $countries
-			country=$select_result;;
+			country=`"${SHOWDIALOG}" menu \
+				'Please select a country whose clocks agree with yours.' \
+				$countries` || exit $?;;
 		*)
 			country=$countries
 		esac
@@ -457,10 +492,9 @@
 		# If there's more than one region, ask the user which one.
 		case $regions in
 		*"$newline"*)
-			echo >&2 'Please select one of the following' \
-				'time zone regions.'
-			doselect $regions
-			region=$select_result;;
+			region=`"${SHOWDIALOG}" menu \
+				'Please select one of the following time zone regions.' \
+				$regions` || exit $?;;
 		*)
 			region=$regions
 		esac
@@ -518,22 +552,24 @@
 
 	# Output TZ info and ask the user to confirm.
 
-	echo >&2 ""
-	echo >&2 "The following information has been given:"
-	echo >&2 ""
+	infomsg='
+The following information has been given:
+
+'
+
 	case $country%$region%$coord in
-	?*%?*%)	say >&2 "	$country$newline	$region";;
-	?*%%)	say >&2 "	$country";;
-	%?*%?*) say >&2 "	coord $coord$newline	$region";;
-	%%?*)	say >&2 "	coord $coord";;
-	*)	say >&2 "	TZ='$TZ'"
+	?*%?*%) infomsg="${infomsg}     $country$newline        $region";;
+	?*%%)   infomsg="${infomsg}     $country";;
+	%?*%?*) infomsg="${infomsg}     coord $coord$newline    $region";;
+	%%?*)   infomsg="${infomsg}     coord $coord";;
+	*)              infomsg="${infomsg}     TZ='$TZ'"
 	esac
-	say >&2 ""
-	say >&2 "Therefore TZ='$TZ' will be used.$extra_info"
-	say >&2 "Is the above information OK?"
+	infomsg="${infomsg}
+
+Therefore TZ='$TZ' will be used.$extra_info
+Is the above information OK?"
 
-	doselect Yes No
-	ok=$select_result
+	ok=`"${SHOWDIALOG}" yesno "${infomsg}" Yes No` || exit $?
 	case $ok in
 	Yes) break
 	esac
